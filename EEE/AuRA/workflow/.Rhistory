EEE_Rhone_Alpes = read_excel("../EEE_Rhone-Alpes.xlsx")
EEE_Auvergne$CD_NOM = "0"
EEE_Auvergne$NOM_VALIDE = "NULL"
#Simplification des nom scientifique en retirant les auteurs
EEE_Auvergne$NOM_SIMPLE = str_split(EEE_Auvergne$NOM_SCIEN, "[:blank:][:upper:]",n=2, simplify = TRUE)[,1]
EEE_Auvergne$NOM_SIMPLE = str_split(EEE_Auvergne$NOM_SIMPLE, "\\(", n = 2, simplify = TRUE)[, 1]
# Definition du repertoire de fichiers
WD = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(WD)
# Charger les bibliotheques necessaires
if(!require("readxl")){install.packages("readxl")} ; library("readxl")
if(!require("tidyverse")){install.packages("tidyverse")} ; library("tidyverse")
if(!require("rtaxref")){remotes::install_github("Rekyt/rtaxref")} ; library("rtaxref")
#Chargement des données
EEE_Auvergne = read_excel("../EEE_Auvergne.xlsx")
EEE_Rhone_Alpes = read_excel("../EEE_Rhone-Alpes.xlsx")
EEE_Auvergne$CD_NOM = "0"
# Ajustement des rangs taxonomiques
EEE_Rhone_Alpes$CD_NOM = "0"
EEE_Rhone_Alpes$NOM_VALIDE = "NULL"
#Simplification des nom scientifique en retirant les auteurs
EEE_Rhone_Alpes$NOM_SIMPLE = str_split(EEE_Rhone_Alpes$NOM_SCIEN, "[:blank:][:upper:]",n=2, simplify = TRUE)[,1]
EEE_Rhone_Alpes$NOM_SIMPLE = str_split(EEE_Rhone_Alpes$NOM_SIMPLE, "\\(", n = 2, simplify = TRUE)[, 1]
EEE_Rhone_Alpes$NOM_SIMPLE = str_split(EEE_Rhone_Alpes$NOM_SIMPLE, "[:blank:]$", n = 2, simplify = TRUE)[, 1]
View(EEE_Rhone_Alpes)
#Boucle de matching
for (i in 1:nrow(EEE_Rhone_Alpes)){
cat(i," : ",EEE_Rhone_Alpes$NOM_SIMPLE[i],"\n")
tryCatch({
t = rt_taxa_search(sciname = EEE_Rhone_Alpes$NOM_SIMPLE[i],version = "16.0")
if(ncol(t)>1){
#Supression des synonymes
if(nrow(t[t$id==t$referenceId,])>=1){t = t[t$id==t$referenceId,]}
#Supression des sous-espèces si nécessaire
if(nrow(t)>=1 & nrow(t[t$rankId=="ES",])>=1){t = t[t$rankId=="ES",]}
#Supression des hybrides
if(str_detect(EEE_Rhone_Alpes$NOM_SIMPLE[i],"[:blank:]x[:blank:]")==FALSE){
t = t[!str_detect(t$scientificName,"[:blank:]x[:blank:]"),]
}
#Attribution des valeurs de CD_NOM et NOM_VALIDE
EEE_Rhone_Alpes$CD_NOM[i] = t$referenceId[1]
EEE_Rhone_Alpes$NOM_VALIDE[i] = t$scientificName[1]}else{
EEE_Rhone_Alpes$CD_NOM[i] = "NOMATCH"
EEE_Rhone_Alpes$NOM_VALIDE[i] = "NOMATCH"
}
}, error = function(e) {
EEE_Rhone_Alpes$CD_NOM[i] = "NOMATCH"
EEE_Rhone_Alpes$NOM_VALIDE[i] = "NOMATCH"
})
}
# Verification des différences
difference = EEE_Rhone_Alpes[EEE_Rhone_Alpes$NOM_VALIDE!=EEE_Rhone_Alpes$NOM_SIMPLE,]
CD_SUP_MATCH = list()
CD_SUP_MATCH[[1]] = TAXREFv17_FLORE_FR %>% filter(CD_SUP %in% EEE_Rhone_Alpes$CD_NOM)
CD_SUP_MATCH[[1]] = left_join(CD_SUP_MATCH[[1]],EEE_Rhone_Alpes,by=c("CD_SUP"="CD_NOM"))
# Ajout des taxons inferieurs
TAXREFv17_FLORE_FR = read.csv("../../../TAXONOMIE/TAXREF/TAXREFv17_FLORE_FR.csv")
TAXREFv17_FLORE_FR$CD_SUP = as.character(TAXREFv17_FLORE_FR$CD_SUP)
TAXREFv17_FLORE_FR$CD_NOM = as.character(TAXREFv17_FLORE_FR$CD_NOM)
CD_SUP_MATCH = list()
CD_SUP_MATCH[[1]] = TAXREFv17_FLORE_FR %>% filter(CD_SUP %in% EEE_Rhone_Alpes$CD_NOM)
CD_SUP_MATCH[[1]] = left_join(CD_SUP_MATCH[[1]],EEE_Rhone_Alpes,by=c("CD_SUP"="CD_NOM"))
for(i in 2:100){
CD_SUP_MATCH[[i]] = TAXREFv17_FLORE_FR[TAXREFv17_FLORE_FR$CD_SUP %in% CD_SUP_MATCH[[i-1]]$CD_NOM,]
CD_SUP_MATCH[[i]] = left_join(CD_SUP_MATCH[[i]],EEE_Rhone_Alpes,by=c("CD_SUP"="CD_NOM"))
CD_SUP_MATCH[[i]]$LAVERGNE = left_join(CD_SUP_MATCH[[i]],CD_SUP_MATCH[[i-1]],by=c("CD_SUP"="CD_NOM"))$LAVERGNE.y
if(nrow(CD_SUP_MATCH[[i]])==0){
break;
}
}
EEE_CD_SUP = do.call(rbind,CD_SUP_MATCH)
#Creation du tableau final avec cotation de Lavergne
EEE_CD_SUP = EEE_CD_SUP %>% select(CD_NOM = CD_REF,NOM_VALIDE = NOM_VALIDE.x,NOM_VERN = NOM_VALIDE.x,LAVERGNE)
EEE_Rhone_Alpes_SELECT = EEE_Rhone_Alpes %>% select(CD_NOM,NOM_VALIDE,NOM_VERN,LAVERGNE)
EEE_Rhone_Alpes_SELECT = rbind(EEE_Rhone_Alpes_SELECT,EEE_CD_SUP)
#Creation du tableau final avec cotation de Lavergne
EEE_CD_SUP = EEE_CD_SUP %>% select(CD_NOM = CD_REF,NOM_VALIDE = NOM_VALIDE.x,LAVERGNE)
View(EEE_CD_SUP)
View(CD_SUP_MATCH)
View(EEE_CD_SUP)
View(EEE_Rhone_Alpes)
# Verification des différences
difference = EEE_Rhone_Alpes[EEE_Rhone_Alpes$NOM_VALIDE!=EEE_Rhone_Alpes$NOM_SIMPLE,]
View(difference)
View(EEE_Rhone_Alpes)
EEE_Rhone_Alpes[duplicated(EEE_Rhone_Alpes),]
EEE_Rhone_Alpes[duplicated(EEE_Rhone_Alpes$NOM_SCIEN),]
EEE_Rhone_Alpes[!duplicated(EEE_Rhone_Alpes$NOM_SCIEN),]
EEE_Rhone_Alpes = EEE_Rhone_Alpes[!duplicated(EEE_Rhone_Alpes$NOM_SCIEN),]
# Ajustement des rangs taxonomiques
EEE_Rhone_Alpes$CD_NOM = "0"
EEE_Rhone_Alpes$NOM_VALIDE = "NULL"
#Simplification des nom scientifique en retirant les auteurs
EEE_Rhone_Alpes$NOM_SIMPLE = str_split(EEE_Rhone_Alpes$NOM_SCIEN, "[:blank:][:upper:]",n=2, simplify = TRUE)[,1]
EEE_Rhone_Alpes$NOM_SIMPLE = str_split(EEE_Rhone_Alpes$NOM_SIMPLE, "\\(", n = 2, simplify = TRUE)[, 1]
EEE_Rhone_Alpes$NOM_SIMPLE = str_split(EEE_Rhone_Alpes$NOM_SIMPLE, "[:blank:]$", n = 2, simplify = TRUE)[, 1]
#Boucle de matching
for (i in 1:nrow(EEE_Rhone_Alpes)){
cat(i," : ",EEE_Rhone_Alpes$NOM_SIMPLE[i],"\n")
tryCatch({
t = rt_taxa_search(sciname = EEE_Rhone_Alpes$NOM_SIMPLE[i],version = "16.0")
if(ncol(t)>1){
#Supression des synonymes
if(nrow(t[t$id==t$referenceId,])>=1){t = t[t$id==t$referenceId,]}
#Supression des sous-espèces si nécessaire
if(nrow(t)>=1 & nrow(t[t$rankId=="ES",])>=1){t = t[t$rankId=="ES",]}
#Supression des hybrides
if(str_detect(EEE_Rhone_Alpes$NOM_SIMPLE[i],"[:blank:]x[:blank:]")==FALSE){
t = t[!str_detect(t$scientificName,"[:blank:]x[:blank:]"),]
}
#Attribution des valeurs de CD_NOM et NOM_VALIDE
EEE_Rhone_Alpes$CD_NOM[i] = t$referenceId[1]
EEE_Rhone_Alpes$NOM_VALIDE[i] = t$scientificName[1]}else{
EEE_Rhone_Alpes$CD_NOM[i] = "NOMATCH"
EEE_Rhone_Alpes$NOM_VALIDE[i] = "NOMATCH"
}
}, error = function(e) {
EEE_Rhone_Alpes$CD_NOM[i] = "NOMATCH"
EEE_Rhone_Alpes$NOM_VALIDE[i] = "NOMATCH"
})
}
# Verification des différences
difference = EEE_Rhone_Alpes[EEE_Rhone_Alpes$NOM_VALIDE!=EEE_Rhone_Alpes$NOM_SIMPLE,]
CD_SUP_MATCH = list()
CD_SUP_MATCH[[1]] = TAXREFv17_FLORE_FR %>% filter(CD_SUP %in% EEE_Rhone_Alpes$CD_NOM)
CD_SUP_MATCH[[1]] = left_join(CD_SUP_MATCH[[1]],EEE_Rhone_Alpes,by=c("CD_SUP"="CD_NOM"))
for(i in 2:100){
CD_SUP_MATCH[[i]] = TAXREFv17_FLORE_FR[TAXREFv17_FLORE_FR$CD_SUP %in% CD_SUP_MATCH[[i-1]]$CD_NOM,]
CD_SUP_MATCH[[i]] = left_join(CD_SUP_MATCH[[i]],EEE_Rhone_Alpes,by=c("CD_SUP"="CD_NOM"))
CD_SUP_MATCH[[i]]$LAVERGNE = left_join(CD_SUP_MATCH[[i]],CD_SUP_MATCH[[i-1]],by=c("CD_SUP"="CD_NOM"))$LAVERGNE.y
if(nrow(CD_SUP_MATCH[[i]])==0){
break;
}
}
EEE_CD_SUP = do.call(rbind,CD_SUP_MATCH)
#Creation du tableau final avec cotation de Lavergne
EEE_CD_SUP = EEE_CD_SUP %>% select(CD_NOM = CD_REF,NOM_VALIDE = NOM_VALIDE.x,LAVERGNE)
EEE_Rhone_Alpes_SELECT = EEE_Rhone_Alpes %>% select(CD_NOM,NOM_VALIDE,LAVERGNE)
EEE_Rhone_Alpes_SELECT = rbind(EEE_Rhone_Alpes_SELECT,EEE_CD_SUP)
View(EEE_Rhone_Alpes_SELECT)
#Sauvegarde du document final Auvergne
write.csv(EEE_Rhone_Alpes_SELECT,"EEE_Rhone_Alpes.csv",row.names = F,fileEncoding = "UTF-8",na="")
read.csv(EEE_Auvergne)
read.csv("EEE_Auvergne.csv")
View(EEE_Rhone_Alpes_SELECT)
EEE_Rhone_Alpes_SELECT=read.csv("EEE_Auvergne.csv")
#Creation du tableau final avec cotation de Lavergne
EEE_CD_SUP = EEE_CD_SUP %>% select(CD_NOM = CD_REF,NOM_VALIDE = NOM_VALIDE.x,LAVERGNE)
EEE_Rhone_Alpes_SELECT = EEE_Rhone_Alpes %>% select(CD_NOM,NOM_VALIDE,LAVERGNE)
EEE_Rhone_Alpes_SELECT = rbind(EEE_Rhone_Alpes_SELECT,EEE_CD_SUP)
EEE_CD_SUP = do.call(rbind,CD_SUP_MATCH)
#Creation du tableau final avec cotation de Lavergne
EEE_CD_SUP = EEE_CD_SUP %>% select(CD_NOM = CD_REF,NOM_VALIDE = NOM_VALIDE.x,LAVERGNE)
EEE_Rhone_Alpes_SELECT = EEE_Rhone_Alpes %>% select(CD_NOM,NOM_VALIDE,LAVERGNE)
EEE_Rhone_Alpes_SELECT = rbind(EEE_Rhone_Alpes_SELECT,EEE_CD_SUP)
EEE_Auvergne_SELECT=read.csv("EEE_Auvergne.csv")
#######################################################
##FUSION FINALE
#######################################################
EEE_Rhone_Alpes_SELECT$ANCIENNE_REGION = "Rhone-Alpes"
EEE_Auvergne_SELECT$ANCIENNE_REGION = "Auvergne"
rbind(EEE_Rhone_Alpes_SELECT,EEE_Auvergne_SELECT)
View(EEE_Auvergne_SELECT)
EEE_Auvergne_SELECT$NOM_VERN = NULL
rbind(EEE_Rhone_Alpes_SELECT,EEE_Auvergne_SELECT)
EEE_AuRA = rbind(EEE_Rhone_Alpes_SELECT,EEE_Auvergne_SELECT)
#######################################################
##FUSION FINALE
#######################################################
EEE_Rhone_Alpes_SELECT$LAVERGNE_RHONE_ALPES = EEE_Rhone_Alpes_SELECT$LAVERGNE
EEE_Auvergne_SELECT$LAVERGNE_AUVERGNE = EEE_Auvergne_SELECT$LAVERGNE
View(EEE_Rhone_Alpes_SELECT)
#######################################################
##FUSION FINALE
#######################################################
EEE_Rhone_Alpes_SELECT$LAVERGNE_RHONE_ALPES = EEE_Rhone_Alpes_SELECT$LAVERGNE
EEE_Rhone_Alpes_SELECT$LAVERGNE = NULL
EEE_Auvergne_SELECT$LAVERGNE_AUVERGNE = EEE_Auvergne_SELECT$LAVERGNE
EEE_Auvergne_SELECT$LAVERGNE = NULL
full_join(EEE_Rhone_Alpes_SELECT,EEE_Auvergne_SELECT,by="CD_NOM")
EEE_AuRA = full_join(EEE_Rhone_Alpes_SELECT,EEE_Auvergne_SELECT,by="CD_NOM")
View(EEE_AuRA)
EEE_AuRA[EEE_AuRA$NOM_VALIDE.x == NA]
EEE_AuRA[EEE_AuRA$NOM_VALIDE.x == NA,]
EEE_AuRA[is.na(EEE_AuRA$NOM_VALIDE.x),] = EEE_AuRA$NOM_VALIDE.y
EEE_AuRA[is.na(EEE_AuRA$NOM_VALIDE.x),]$NOM_VALIDE.x = EEE_AuRA[is.na(EEE_AuRA$NOM_VALIDE.x),]$NOM_VALIDE.y
EEE_AuRA[is.na(EEE_AuRA$NOM_VALIDE.y),]$NOM_VALIDE.y = EEE_AuRA[is.na(EEE_AuRA$NOM_VALIDE.y),]$NOM_VALIDE.x
View(EEE_AuRA)
#Selection des colonnes
EEE_AuRA %>% select(CD_NOM,NOM_VALIDE=NOM_VALIDE.x,LAVERGNE_AUVERGNE,LAVERGNE_RHONE_ALPES)
#Selection des colonnes
EEE_AuRA = EEE_AuRA %>% select(CD_NOM,NOM_VALIDE=NOM_VALIDE.x,LAVERGNE_AUVERGNE,LAVERGNE_RHONE_ALPES)
#Sauvegarde du fiche EEE AuRA final
write.csv(EEE_AuRA,"EEE_AuRA.csv",row.names = F,fileEncoding = "UTF-8",na="")
