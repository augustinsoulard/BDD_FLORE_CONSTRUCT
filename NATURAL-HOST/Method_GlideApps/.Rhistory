baseflor_bryo = read.csv("baseflor_bryoTAXREFv16.csv",h=T)
View(baseflor_bryo)
baseflor_bryo = read.csv2("baseflor_bryoTAXREFv16.csv",h=T)
View(baseflor_bryo)
######## Prise en compte du correctif de baseflore_bryo
# Chargement du correctif
Correctif_baseflor_bryo <- read_excel("Correctif_baseflor_bryo.xlsx")
# Charger les bibliotheques necessaires
if(!require("readxl")){install.packages("readxl")} ; library("readxl")
if(!require("xlsx")){install.packages("xlsx")} ; library("xlsx")
if(!require("tidyverse")){install.packages("tidyverse")} ; library("tidyverse")
if(!require("rtaxref")){remotes::install_github("Rekyt/rtaxref")} ; library("rtaxref")
######## Prise en compte du correctif de baseflore_bryo
# Chargement du correctif
Correctif_baseflor_bryo <- read_excel("Correctif_baseflor_bryo.xlsx")
View(Correctif_baseflor_bryo)
#Boucle de correction
for(i in 1:nrow(Correctif_baseflor_bryo)){
if(nrow(baseflor_bryo[baseflor_bryo$CD_NOM == Correctif_baseflor_bryo$CD_NOM[i],])>=1){
#remplacement des colonnes pour els epsèces concernées
baseflor_bryo[baseflor_bryo$CD_NOM == Correctif_baseflor_bryo$CD_NOM[i],]$floraison = Correctif_baseflor_bryo$floraison[i]
baseflor_bryo[baseflor_bryo$CD_NOM == Correctif_baseflor_bryo$CD_NOM[i],]$CARACTERISATION_ECOLOGIQUE_.HABITAT_OPTIMAL. =
Correctif_baseflor_bryo$CARACTERISATION_ECOLOGIQUE_.HABITAT_OPTIMAL.[i]
baseflor_bryo[baseflor_bryo$CD_NOM == Correctif_baseflor_bryo$CD_NOM[i],]$INDICATION_PHYTOSOCIOLOGIQUE_CARACTERISTIQUE =
Correctif_baseflor_bryo$INDICATION_PHYTOSOCIOLOGIQUE_CARACTERISTIQUE[i]
##############COMPLETERRRRRRR
}
}
View(baseflor_bryo)
# Enregistrer le fichier final
write.csv2(baseflor_bryo,"baseflor_bryoTAXREFv16.csv",row.names = F,fileEncoding = "UTF-8",na="")
View(baseflor_bryo)
# Definition du repertoire de fichiers
WD = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(WD)
# Charger les bibliotheques necessaires
if(!require("readxl")){install.packages("readxl")} ; library("readxl")
if(!require("tidyverse")){install.packages("tidyverse")} ; library("tidyverse")
if(!require("reshape2")){install.packages("reshape2")} ; library("reshape2")
BDD_FICHE_FLORE <- read_excel("../../BDD_FICHE_FLORE/BDD_FICHE_FLORE.xlsx",
sheet = "IMG")
Method_enjeu_PACAv2.0 <- read_excel("../../../ENJEU_FLORE/ENJEU_PACA_AUGUSTIN_SOULARD/Method_enjeu_PACAv2.0.xlsx",
sheet = "Tableau_general")
baseflor_bryoTAXREFv16 <- read.csv("../../TAXONOMIE/TAXREF-MATCH-BASEFLOR/baseflor_bryoTAXREFv16.csv", sep=";")
#Transformation des donnees brutes
#BDD_FICHE_FLORE
BDD_FICHE_FLORE = BDD_FICHE_FLORE %>% filter(!is.na(PATH_IMG))
BDD_FICHE_FLORE$TEXTE_LEGEND_IMG = paste0(BDD_FICHE_FLORE$AUTEUR," - ",
BDD_FICHE_FLORE$LICENCE)
correspondances <- c("1" = "janvier", "2" = "février", "3" = "mars",
"4" = "avril", "5" = "mai", "6" = "juin",
"7" = "juillet", "8" = "août", "9" = "septembre",
"10" = "octobre", "11" = "novembre", "12" = "décembre")
baseflor_bryoTAXREFv16$floraison <- str_replace_all(baseflor_bryoTAXREFv16$floraison, correspondances)
# Gestion des duplicats
BDD_FICHE_FLORE_reformed <- BDD_FICHE_FLORE %>%
group_by(CD_NOM) %>%
mutate(
# Pour une deuxième image
PATH_IMG_2 = ifelse(n() == 2, lead(PATH_IMG), NA),
TEXTE_LEGEND_IMG_2 = ifelse(n() == 2, lead(TEXTE_LEGEND_IMG), NA),
# Pour une troisième image
PATH_IMG_3 = ifelse(n() == 3, lead(PATH_IMG,2), NA),
TEXTE_LEGEND_IMG_3 = ifelse(n() == 3, lead(TEXTE_LEGEND_IMG,2), NA)
)
BDD_FICHE_FLORE_unique = BDD_FICHE_FLORE_reformed[!duplicated(BDD_FICHE_FLORE_reformed$CD_NOM),]
#Jointure des autres données
#Préparation colonne de jointure
BDD_FICHE_FLORE_unique$CD_NOM = as.character(BDD_FICHE_FLORE_unique$CD_NOM)
Method_enjeu_PACAv2.0$CD_NOM = as.character(Method_enjeu_PACAv2.0$CD_NOM)
baseflor_bryoTAXREFv16$CD_NOM = as.character(baseflor_bryoTAXREFv16$CD_NOM)
#Jointure
BDD_FICHE_FLORE_join_T = left_join(BDD_FICHE_FLORE_unique,Method_enjeu_PACAv2.0,by="CD_NOM")
BDD_FICHE_FLORE_join_TB = left_join(BDD_FICHE_FLORE_join_T,baseflor_bryoTAXREFv16,by="CD_NOM")
#Remise en valeur unique
BDD_FICHE_FLORE_join_TB = BDD_FICHE_FLORE_join_TB[!duplicated(BDD_FICHE_FLORE_join_TB$CD_NOM),]
#Selection des colonnes
BDD_FICHE_FLORE_join_TB = BDD_FICHE_FLORE_join_TB %>% select(
CD_NOM,
ESPECE,
NOM_VERN = NOM_VERN.x,
FAMILLE,
PATH_IMG,
TEXTE_LEGEND_IMG,
PATH_IMG_2,
TEXTE_LEGEND_IMG_2,
PATH_IMG_3,
TEXTE_LEGEND_IMG_3,
INDIGENAT,
EVEE,
DH,
LRN,
LRR,
ZNIEFF,
ENJEU_CBN,
`Indicatrice ZH`,
PROTECTION_PACA,
INTERET_PACA,
CARACTERISATION_ECOLOGIQUE = CARACTERISATION_ECOLOGIQUE_.HABITAT_OPTIMAL.,
INDICATION_PHYTOSOCIOLOGIQUE = INDICATION_PHYTOSOCIOLOGIQUE_CARACTERISTIQUE,
CHOROLOGIE,
floraison,
inflorescence,
sexualité,
ordre_maturation,
pollinisation,
fruit,
dissémination,
couleur_fleur,
macule,
Lumière,	Température,
Continentalité,
Humidité_atmosphérique,
Humidité_édaphique,
Réaction_du_sol_.pH.,
Niveau_trophique,
Salinité,
Texture,
Matière_organique
)
#Enregistrement du tableau a integrer à GlideApp
write.csv(BDD_FICHE_FLORE_join_TB,file = "BDD_Flore_patri_PACA.csv",row.names = F,fileEncoding = "UTF-8",na="")
View(BDD_FICHE_FLORE_join_T)
View(BDD_FICHE_FLORE_join_T)
# Filtrer uniquement les espèces à enjeu ou patrimoniale
BDD_FICHE_FLORE_join_TB %>% filter(!PROTECTION_PACA %in% "-")
# Filtrer uniquement les espèces à enjeu ou patrimoniale
BDD_FICHE_FLORE_join_TB %>% filter(!PROTECTION_PACA %in% "-" | INTERET_PACA %in% c("MODERE","FORT","TRES FORT","MAJEUR"))
# Filtrer uniquement les espèces à enjeu ou patrimoniale
BDD_FICHE_FLORE_ENJEU = BDD_FICHE_FLORE_join_TB %>% filter(!PROTECTION_PACA %in% "-" | INTERET_PACA %in% c("MODERE","FORT","TRES FORT","MAJEUR"))
View(BDD_FICHE_FLORE_ENJEU)
View(BDD_FICHE_FLORE_join_T)
View(BDD_FICHE_FLORE_ENJEU)
#Enregistrement du tableau a integrer à GlideApp
write.csv(BDD_FICHE_FLORE_ENJEU,file = "BDD_Flore_patri_PACA.csv",row.names = F,fileEncoding = "UTF-8",na="")
BDD_FICHE_FLORE <- read_excel("../../BDD_FICHE_FLORE/BDD_FICHE_FLORE.xlsx",
sheet = "IMG")
Method_enjeu_PACAv2.0 <- read_excel("../../../ENJEU_FLORE/ENJEU_PACA_AUGUSTIN_SOULARD/Method_enjeu_PACAv2.0.xlsx",
sheet = "Tableau_general")
baseflor_bryoTAXREFv16 <- read.csv("../../TAXONOMIE/TAXREF-MATCH-BASEFLOR/baseflor_bryoTAXREFv16.csv", sep=";")
#Transformation des donnees brutes
#BDD_FICHE_FLORE
BDD_FICHE_FLORE = BDD_FICHE_FLORE %>% filter(!is.na(PATH_IMG))
BDD_FICHE_FLORE$TEXTE_LEGEND_IMG = paste0(BDD_FICHE_FLORE$AUTEUR," - ",
BDD_FICHE_FLORE$LICENCE)
correspondances <- c("1" = "janvier", "2" = "février", "3" = "mars",
"4" = "avril", "5" = "mai", "6" = "juin",
"7" = "juillet", "8" = "août", "9" = "septembre",
"10" = "octobre", "11" = "novembre", "12" = "décembre")
baseflor_bryoTAXREFv16$floraison <- str_replace_all(baseflor_bryoTAXREFv16$floraison, correspondances)
# Gestion des duplicats
BDD_FICHE_FLORE_reformed <- BDD_FICHE_FLORE %>%
group_by(CD_NOM) %>%
mutate(
# Pour une deuxième image
PATH_IMG_2 = ifelse(n() == 2, lead(PATH_IMG), NA),
TEXTE_LEGEND_IMG_2 = ifelse(n() == 2, lead(TEXTE_LEGEND_IMG), NA),
# Pour une troisième image
PATH_IMG_3 = ifelse(n() == 3, lead(PATH_IMG,2), NA),
TEXTE_LEGEND_IMG_3 = ifelse(n() == 3, lead(TEXTE_LEGEND_IMG,2), NA)
)
BDD_FICHE_FLORE_unique = BDD_FICHE_FLORE_reformed[!duplicated(BDD_FICHE_FLORE_reformed$CD_NOM),]
#Jointure des autres données
#Préparation colonne de jointure
BDD_FICHE_FLORE_unique$CD_NOM = as.character(BDD_FICHE_FLORE_unique$CD_NOM)
Method_enjeu_PACAv2.0$CD_NOM = as.character(Method_enjeu_PACAv2.0$CD_NOM)
baseflor_bryoTAXREFv16$CD_NOM = as.character(baseflor_bryoTAXREFv16$CD_NOM)
#Jointure
BDD_FICHE_FLORE_join_T = left_join(BDD_FICHE_FLORE_unique,Method_enjeu_PACAv2.0,by="CD_NOM")
BDD_FICHE_FLORE_join_TB = left_join(BDD_FICHE_FLORE_join_T,baseflor_bryoTAXREFv16,by="CD_NOM")
#Remise en valeur unique
BDD_FICHE_FLORE_join_TB = BDD_FICHE_FLORE_join_TB[!duplicated(BDD_FICHE_FLORE_join_TB$CD_NOM),]
#Selection des colonnes
BDD_FICHE_FLORE_join_TB = BDD_FICHE_FLORE_join_TB %>% select(
CD_NOM,
ESPECE,
NOM_VERN = NOM_VERN.x,
FAMILLE,
PATH_IMG,
TEXTE_LEGEND_IMG,
PATH_IMG_2,
TEXTE_LEGEND_IMG_2,
PATH_IMG_3,
TEXTE_LEGEND_IMG_3,
INDIGENAT,
EVEE,
DH,
LRN,
LRR,
ZNIEFF,
ENJEU_CBN,
`Indicatrice ZH`,
PROTECTION_PACA,
INTERET_PACA,
CARACTERISATION_ECOLOGIQUE = CARACTERISATION_ECOLOGIQUE_.HABITAT_OPTIMAL.,
INDICATION_PHYTOSOCIOLOGIQUE = INDICATION_PHYTOSOCIOLOGIQUE_CARACTERISTIQUE,
CHOROLOGIE,
floraison,
inflorescence,
sexualité,
ordre_maturation,
pollinisation,
fruit,
dissémination,
couleur_fleur,
macule,
Lumière,	Température,
Continentalité,
Humidité_atmosphérique,
Humidité_édaphique,
Réaction_du_sol_.pH.,
Niveau_trophique,
Salinité,
Texture,
Matière_organique
)
# Filtrer uniquement les espèces à enjeu ou patrimoniale
BDD_FICHE_FLORE_ENJEU = BDD_FICHE_FLORE_join_TB %>% filter(!PROTECTION_PACA %in% "-" | INTERET_PACA %in% c("MODERE","FORT","TRES FORT","MAJEUR"))
#Enregistrement du tableau a integrer à GlideApp
write.csv(BDD_FICHE_FLORE_ENJEU,file = "BDD_Flore_patri_PACA.csv",row.names = F,fileEncoding = "UTF-8",na="")
View(BDD_FICHE_FLORE_ENJEU)
View(BDD_FICHE_FLORE)
DD_FICHE_FLORE %>%
group_by(CD_NOM)
BDD_FICHE_FLORE %>%
group_by(CD_NOM)
# Gestion des duplicats
test = BDD_FICHE_FLORE %>%
# Gestion des duplicats
test = BDD_FICHE_FLORE %>% group_by(CD_NOM)
# Gestion des duplicats
test = BDD_FICHE_FLORE %>% group_by(CD_NOM)
View(test)
BDD_FICHE_FLORE_reformed <- BDD_FICHE_FLORE %>%
group_by(CD_NOM) %>% n()==2
# Gestion des duplicats
test = BDD_FICHE_FLORE %>% group_by(CD_NOM) %>% n()==2
# Gestion des duplicats
test = BDD_FICHE_FLORE %>% group_by(CD_NOM) %>% filter(n()==2)
View(test)
View(test)
# Gestion des duplicats
test = BDD_FICHE_FLORE %>% group_by(CD_NOM) %>% filter(n()==3)
View(test)
# Gestion des duplicats
BDD_FICHE_FLORE_reformed <- BDD_FICHE_FLORE %>%
group_by(CD_NOM)
# Gestion des duplicats
BDD_FICHE_FLORE_reformed <- BDD_FICHE_FLORE %>%
group_by(CD_NOM) %>%
mutate(
# Pour une deuxième image
PATH_IMG_2 = ifelse(n() == 2 |n() == 3, lead(PATH_IMG), NA),
TEXTE_LEGEND_IMG_2 = ifelse(n() == 2, lead(TEXTE_LEGEND_IMG), NA),
# Pour une troisième image
PATH_IMG_3 = ifelse(n() == 3, lead(PATH_IMG,2), NA),
TEXTE_LEGEND_IMG_3 = ifelse(n() == 3, lead(TEXTE_LEGEND_IMG,2), NA)
)
BDD_FICHE_FLORE_unique = BDD_FICHE_FLORE_reformed[!duplicated(BDD_FICHE_FLORE_reformed$CD_NOM),]
#Jointure des autres données
#Préparation colonne de jointure
BDD_FICHE_FLORE_unique$CD_NOM = as.character(BDD_FICHE_FLORE_unique$CD_NOM)
Method_enjeu_PACAv2.0$CD_NOM = as.character(Method_enjeu_PACAv2.0$CD_NOM)
baseflor_bryoTAXREFv16$CD_NOM = as.character(baseflor_bryoTAXREFv16$CD_NOM)
#Jointure
BDD_FICHE_FLORE_join_T = left_join(BDD_FICHE_FLORE_unique,Method_enjeu_PACAv2.0,by="CD_NOM")
BDD_FICHE_FLORE_join_TB = left_join(BDD_FICHE_FLORE_join_T,baseflor_bryoTAXREFv16,by="CD_NOM")
#Remise en valeur unique
BDD_FICHE_FLORE_join_TB = BDD_FICHE_FLORE_join_TB[!duplicated(BDD_FICHE_FLORE_join_TB$CD_NOM),]
#Selection des colonnes
BDD_FICHE_FLORE_join_TB = BDD_FICHE_FLORE_join_TB %>% select(
CD_NOM,
ESPECE,
NOM_VERN = NOM_VERN.x,
FAMILLE,
PATH_IMG,
TEXTE_LEGEND_IMG,
PATH_IMG_2,
TEXTE_LEGEND_IMG_2,
PATH_IMG_3,
TEXTE_LEGEND_IMG_3,
INDIGENAT,
EVEE,
DH,
LRN,
LRR,
ZNIEFF,
ENJEU_CBN,
`Indicatrice ZH`,
PROTECTION_PACA,
INTERET_PACA,
CARACTERISATION_ECOLOGIQUE = CARACTERISATION_ECOLOGIQUE_.HABITAT_OPTIMAL.,
INDICATION_PHYTOSOCIOLOGIQUE = INDICATION_PHYTOSOCIOLOGIQUE_CARACTERISTIQUE,
CHOROLOGIE,
floraison,
inflorescence,
sexualité,
ordre_maturation,
pollinisation,
fruit,
dissémination,
couleur_fleur,
macule,
Lumière,	Température,
Continentalité,
Humidité_atmosphérique,
Humidité_édaphique,
Réaction_du_sol_.pH.,
Niveau_trophique,
Salinité,
Texture,
Matière_organique
)
# Filtrer uniquement les espèces à enjeu ou patrimoniale
BDD_FICHE_FLORE_ENJEU = BDD_FICHE_FLORE_join_TB %>% filter(!PROTECTION_PACA %in% "-" | INTERET_PACA %in% c("MODERE","FORT","TRES FORT","MAJEUR"))
View(BDD_FICHE_FLORE_ENJEU)
# Gestion des duplicats
BDD_FICHE_FLORE_reformed <- BDD_FICHE_FLORE %>%
group_by(CD_NOM) %>%
mutate(
# Pour une deuxième image
PATH_IMG_2 = ifelse(n() == 2 |n() == 3, lead(PATH_IMG), NA),
TEXTE_LEGEND_IMG_2 = ifelse(n() == 2|n() == 3, lead(TEXTE_LEGEND_IMG), NA),
# Pour une troisième image
PATH_IMG_3 = ifelse(n() == 3, lead(PATH_IMG,2), NA),
TEXTE_LEGEND_IMG_3 = ifelse(n() == 3, lead(TEXTE_LEGEND_IMG,2), NA)
)
BDD_FICHE_FLORE_unique = BDD_FICHE_FLORE_reformed[!duplicated(BDD_FICHE_FLORE_reformed$CD_NOM),]
#Jointure des autres données
#Préparation colonne de jointure
BDD_FICHE_FLORE_unique$CD_NOM = as.character(BDD_FICHE_FLORE_unique$CD_NOM)
Method_enjeu_PACAv2.0$CD_NOM = as.character(Method_enjeu_PACAv2.0$CD_NOM)
baseflor_bryoTAXREFv16$CD_NOM = as.character(baseflor_bryoTAXREFv16$CD_NOM)
#Jointure
BDD_FICHE_FLORE_join_T = left_join(BDD_FICHE_FLORE_unique,Method_enjeu_PACAv2.0,by="CD_NOM")
BDD_FICHE_FLORE_join_TB = left_join(BDD_FICHE_FLORE_join_T,baseflor_bryoTAXREFv16,by="CD_NOM")
#Remise en valeur unique
BDD_FICHE_FLORE_join_TB = BDD_FICHE_FLORE_join_TB[!duplicated(BDD_FICHE_FLORE_join_TB$CD_NOM),]
#Selection des colonnes
BDD_FICHE_FLORE_join_TB = BDD_FICHE_FLORE_join_TB %>% select(
CD_NOM,
ESPECE,
NOM_VERN = NOM_VERN.x,
FAMILLE,
PATH_IMG,
TEXTE_LEGEND_IMG,
PATH_IMG_2,
TEXTE_LEGEND_IMG_2,
PATH_IMG_3,
TEXTE_LEGEND_IMG_3,
INDIGENAT,
EVEE,
DH,
LRN,
LRR,
ZNIEFF,
ENJEU_CBN,
`Indicatrice ZH`,
PROTECTION_PACA,
INTERET_PACA,
CARACTERISATION_ECOLOGIQUE = CARACTERISATION_ECOLOGIQUE_.HABITAT_OPTIMAL.,
INDICATION_PHYTOSOCIOLOGIQUE = INDICATION_PHYTOSOCIOLOGIQUE_CARACTERISTIQUE,
CHOROLOGIE,
floraison,
inflorescence,
sexualité,
ordre_maturation,
pollinisation,
fruit,
dissémination,
couleur_fleur,
macule,
Lumière,	Température,
Continentalité,
Humidité_atmosphérique,
Humidité_édaphique,
Réaction_du_sol_.pH.,
Niveau_trophique,
Salinité,
Texture,
Matière_organique
)
# Filtrer uniquement les espèces à enjeu ou patrimoniale
BDD_FICHE_FLORE_ENJEU = BDD_FICHE_FLORE_join_TB %>% filter(!PROTECTION_PACA %in% "-" | INTERET_PACA %in% c("MODERE","FORT","TRES FORT","MAJEUR"))
View(BDD_FICHE_FLORE_ENJEU)
#Enregistrement du tableau a integrer à GlideApp
write.csv(BDD_FICHE_FLORE_ENJEU,file = "BDD_Flore_patri_PACA.csv",row.names = F,fileEncoding = "UTF-8",na="")
